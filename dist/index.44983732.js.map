{"mappings":"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","sources":["src/script.js"],"sourcesContent":["// script.js\r\n\r\n// Get references to DOM elements\r\nconst canvas = document.getElementById(\"gameCanvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\n// Screens\r\nconst difficultySelection = document.getElementById(\"difficulty-selection\");\r\nconst gameOverScreen = document.getElementById(\"game-over\");\r\nconst restartBtn = document.getElementById(\"restart-btn\");\r\n\r\n// Difficulty Buttons\r\nconst difficultyButtons = document.querySelectorAll(\".difficulty-btn\");\r\n\r\n// Game settings\r\nconst box = 20;\r\nconst canvasSize = 400; // Canvas size\r\n\r\nlet gameSpeed; // To be set based on difficulty\r\nlet game; // To store the interval\r\n\r\n// Snake and food\r\nlet snake;\r\nlet direction;\r\nlet food;\r\n\r\n// Initialize the game\r\nfunction init(speed) {\r\n  // Reset game variables\r\n  snake = [{ x: box * 5, y: box * 5 }];\r\n  direction = \"RIGHT\";\r\n  food = {\r\n    x: Math.floor(Math.random() * (canvasSize / box)) * box,\r\n    y: Math.floor(Math.random() * (canvasSize / box)) * box,\r\n  };\r\n\r\n  // Clear any existing game loop\r\n  clearInterval(game);\r\n\r\n  // Start the game loop with the selected speed\r\n  gameSpeed = speed;\r\n  game = setInterval(draw, gameSpeed);\r\n}\r\n\r\nfunction draw() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Draw boundary\r\n  ctx.strokeStyle = \"#04b910\";\r\n  ctx.strokeRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Draw the food\r\n  ctx.fillStyle = \"red\";\r\n  ctx.fillRect(food.x, food.y, box, box);\r\n\r\n  // Move the snake by creating a new head\r\n  const head = { x: snake[0].x, y: snake[0].y };\r\n\r\n  // Move the snake's head based on the direction\r\n  if (direction === \"LEFT\") head.x -= box;\r\n  if (direction === \"UP\") head.y -= box;\r\n  if (direction === \"RIGHT\") head.x += box;\r\n  if (direction === \"DOWN\") head.y += box;\r\n\r\n  // Add the new head to the snake\r\n  snake.unshift(head);\r\n\r\n  // Wll Collision\r\n  if (\r\n    head.x < 0 ||\r\n    head.x >= canvasSize ||\r\n    head.y < 0 ||\r\n    head.y >= canvasSize\r\n  ) {\r\n    endGame();\r\n    return;\r\n  }\r\n\r\n  // Self Collision\r\n  for (let i = 1; i < snake.length; i++) {\r\n    if (head.x === snake[i].x && head.y === snake[i].y) {\r\n      endGame();\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Draw the snake\r\n  for (let i = 0; i < snake.length; i++) {\r\n    ctx.fillStyle = i === 0 ? \"green\" : \"lightgreen\"; // Head vs body\r\n    ctx.fillRect(snake[i].x, snake[i].y, box, box);\r\n  }\r\n\r\n  // Check if snake has eaten the food\r\n  if (head.x === food.x && head.y === food.y) {\r\n    // Snake grows, spawn new food\r\n    spawnFood();\r\n  } else {\r\n    // Remove the tail to keep the snake the same length\r\n    snake.pop();\r\n  }\r\n}\r\n\r\n// Function to handle game over\r\nfunction endGame() {\r\n  clearInterval(game);\r\n  canvas.classList.add(\"hidden\");\r\n  gameOverScreen.classList.remove(\"hidden\");\r\n}\r\n\r\n// Spawn food\r\nfunction spawnFood() {\r\n  food = {\r\n    x: Math.floor(Math.random() * (canvasSize / box)) * box,\r\n    y: Math.floor(Math.random() * (canvasSize / box)) * box,\r\n  };\r\n\r\n  // food doesn't spawn on the snake\r\n  for (let segment of snake) {\r\n    if (segment.x === food.x && segment.y === food.y) {\r\n      spawnFood();\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n// Change direction based on key presses\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  if (event.key === \"ArrowLeft\" && direction !== \"RIGHT\") {\r\n    direction = \"LEFT\";\r\n  } else if (event.key === \"ArrowUp\" && direction !== \"DOWN\") {\r\n    direction = \"UP\";\r\n  } else if (event.key === \"ArrowRight\" && direction !== \"LEFT\") {\r\n    direction = \"RIGHT\";\r\n  } else if (event.key === \"ArrowDown\" && direction !== \"UP\") {\r\n    direction = \"DOWN\";\r\n  }\r\n});\r\n\r\n// Handle difficulty selection\r\ndifficultyButtons.forEach((button) => {\r\n  button.addEventListener(\"click\", () => {\r\n    const speed = parseInt(button.getAttribute(\"data-speed\"));\r\n    console.log(`Difficulty selected: ${button.textContent}, Speed: ${speed}`);\r\n    startGame(speed);\r\n  });\r\n});\r\n\r\n// Start the game with selected difficulty\r\nfunction startGame(speed) {\r\n  difficultySelection.classList.add(\"hidden\");\r\n  gameOverScreen.classList.add(\"hidden\");\r\n  canvas.classList.remove(\"hidden\");\r\n  init(speed);\r\n}\r\n\r\n// Handle game restart\r\nrestartBtn.addEventListener(\"click\", () => {\r\n  console.log(\"Restart button clicked\");\r\n  startGame(gameSpeed); // Restart with the same speed\r\n});\r\n"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}